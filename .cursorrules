# .cursorrules

project: "DMOC Web (PWA)"
owner: "Digiwize"
description: >
Multi-tenant logistics operations app converted from Windows to web.
Each logistics client (Delta, Cobra, etc.) runs under Digiwize.
Uses MySQL/PostgreSQL, Prisma, Next.js, tRPC, Socket.IO, BullMQ, and MinIO.

rules:

- Always comment the top of every code file with its relative path and purpose.
- Use modular folder structure under /src/app and /src/server/api.
- Enforce tenant isolation via tenantId on every query (Prisma model field).
- Global offender_registry visible only through backend logic, not client-to-client.
- Use Prisma ORM for all DB access (MySQL/PostgreSQL, SQLite for dev).
- Use Socket.IO for real-time manifest updates and WhatsApp/GPS feed.
- Use next-pwa and Dexie for offline PWA support.
- UI: Tailwind + shadcn + lucide-react; must respect tenant theme.
- Backend: tRPC + BullMQ + Redis + MinIO for media storage.
- ANPR uses YOLOv8 + PaddleOCR microservice (FastAPI).
- Biometrics uses InsightFace or DeepFace for selfie/ID match.
- Keep functions ≤ 60 lines; document logic and side effects.
- Digiwize admins can view all tenants; tenants can see only their data.
- Push updates through real-time sockets, not polling.
- Never expose raw ID numbers across tenants.
- Preserve legacy IDs (companyId, driverId, vehicleId) for Windows migration.
- When opening a PR, include the Linear issue ID in the branch name and PR title; summarize changes, risks, and test steps.

## Linear Integration - CRITICAL FOR AI CHATS

- **Workspace**: justwessels (https://linear.app/justwessels)
- **Team**: Justwessels (team ID: 39290bde-f690-4d61-94e3-439faf1892d1)
- **Project**: DMOC (dmoc-86db242489ad)
- **Issue Prefix**: JUS- (e.g., JUS-16, JUS-17)
- **Git Branch Format**: jjwprotozoa/jus-{issue-number}-{kebab-case-title}

### MCP Configuration for AI Chats

- **ALWAYS use team parameter**: `"justwessels"` (exactly this string, lowercase)
- **NEVER use**: "Justin's projects", "Justwessels", or "justins-projects-f7a019bf"
- **Team ID**: 39290bde-f690-4d61-94e3-439faf1892d1
- **Project**: dmoc (optional for project-specific issues)

### MCP Tool Usage Examples

```typescript
// ✅ CORRECT - List issues
mcp_Linear_list_issues({ team: 'justwessels', limit: 50 });

// ✅ CORRECT - Create issue
mcp_Linear_create_issue({ title: 'Title', team: 'justwessels', priority: 2 });

// ✅ CORRECT - Get team info
mcp_Linear_get_team({ query: 'justwessels' });
```

### Issue Management

- Always create Linear issues for significant changes, bug fixes, and new features
- Include Linear issue IDs in commit messages and changelog entries
- Use team "justwessels" (not "Justin's projects") when creating issues via MCP
- Reference LINEAR_CONFIG.md for complete MCP configuration details

## Changelog Management

- Maintain CHANGELOG.md using semantic versioning (MAJOR.MINOR.PATCH).
- Use automated changelog scripts: `npm run changelog:add`, `npm run changelog:version`, `npm run changelog:generate`.
- Update changelog for significant changes (features, fixes, security updates).
- Git hooks automatically check for changelog updates on commits.
- Version bumping: patch (bug fixes), minor (new features), major (breaking changes).
- Include Linear issue IDs in changelog entries when applicable.
- Follow Keep a Changelog format with categories: Added, Changed, Fixed, Security, Deprecated, Removed.

## Version Guidelines

- **MAJOR** (X.0.0): Breaking changes, major architectural changes, API changes
- **MINOR** (0.X.0): New features, significant improvements, new integrations
- **PATCH** (0.0.X): Bug fixes, minor improvements, documentation updates, dependency updates

## Changelog Entry Format

```markdown
### Added

- Feature description with context and impact
- Integration with external service X

### Changed

- Modified behavior description with migration notes
- Updated dependency X to version Y

### Fixed

- Bug fix description with affected components
- Performance improvement in component X

### Security

- Security fix description with CVE if applicable
- Updated authentication mechanism
```

## Automated Changelog Commands

- `npm run changelog:add <type> <description> [category]` - Add manual entry
- `npm run changelog:version [type] [version]` - Create new version section
- `npm run changelog:generate [since]` - Generate from git commits
- `npm run changelog:current` - Show current version
- `npm run version:patch|minor|major` - Quick version bumping

## Git Integration

- Pre-commit hook checks for changelog updates on significant changes
- Post-merge hook suggests generating changelog from commits
- Husky manages git hooks automatically
- Changelog updates are encouraged but not mandatory for small changes

## Reverse Engineering & Windows Migration

- Reference `DMOC_WINDOWS_TO_WEB_MAPPING.md` for comprehensive Windows-to-web mapping
- Preserve legacy IDs (companyId, driverId, vehicleId) in Prisma models for data migration
- Map Windows forms to Next.js pages in `/src/app/dashboard/`
- Map Windows database tables to Prisma models in `/prisma/schema.prisma`
- Map Windows business logic to tRPC procedures in `/src/server/api/routers/`
- Ensure tenant isolation with `tenantId` field on all multi-tenant models
- Use mock data from seed files to understand Windows data structure
- Maintain feature parity between Windows and web versions
- Document any missing features or behavioral differences

- **Incremental Edits:** For non-trivial or multi-section file changes, always break down edits into the smallest logical steps possible (one function, handler, or modal per edit; never wholesale rewrites). Apply changes incrementally and verify results before proceeding. If a large code edit fails, retry as a sequence of smaller changes instead of replacing the entire file. Agents and developers should prefer 3–5 focused edits for multi-part features/refactors/UI pages for reliability and easier debugging.